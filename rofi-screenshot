#!/usr/bin/env bash

## rofi-screenshot
## Author: ceuk @ github
## Licence: WTFPL
## Usage:
##    show the menu with rofi-screenshot
##    stop recording with rofi-screenshot -s

# Screenshot directory
screenshot_directory="${ROFI_SCREENSHOT_DIR:-${XDG_PICTURES_DIR:-$HOME/Pictures}/Screenshots}"

# Default date format
default_date_format="${ROFI_SCREENSHOT_DATE_FORMAT:-"+%Y-%m-%d-%H-%M-%S"}"

# Tmp File
tmp_dir="/tmp"
tmp_file="screenshot_clip.png"
tmp_fp="$tmp_dir/$tmp_file"

# Satty config
#satty_cfg="--copy-command wl-copy --actions-on-enter save-to-clipboard,save-to-file"
satty_cfg="--copy-command wl-copy --fullscreen --actions-on-enter save-to-file"

# set ffmpeg defaults
ffmpeg() {
  command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

video_to_gif() {
  ffmpeg -i "$1" -vf palettegen -f image2 -c:v png - |
    ffmpeg -i "$1" -i - -filter_complex paletteuse "$2"
}

makescreenshot() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to capture"
  dt=$2
  dp="$screenshot_directory/$dt.png"
  hyprshot -m "$1" --raw | satty $satty_cfg --filename "-" -o "$dp"
  wl-copy -t image/png <"$dp"
  notify-send --app-name="screenshot" "Screenshot" "Selection copied to Clipboard and Saved to $dp"
}

rgtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
  dt=$1
  #ffcast -q "$(slop -n -f '-g %g ' && countdown)" rec /tmp/screenshot_gif.mp4
  wf-recorder -g "$(slurp)" -m mp4 -f /tmp/screenshot_gif.mp4 &
  pid=$!
  notify-send --app-name="screenshot" "Screenshot" "Recording video" -w --action="kill $pid"="Stop Recording" | xargs -I{} bash -c "{}"
  notify-send --app-name="screenshot" "Screenshot" "Converting to gif… (can take a while)"
  video_to_gif /tmp/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm /tmp/screenshot_gif.mp4
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}/$dt.gif"
}

rvtf() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
  dt=$1
  dp="$screenshot_directory/$dt.mp4"
  wf-recorder -g "$(slurp)" $2 -m mp4 -f "$dp" &
  pid=$!
  notify-send --app-name="screenshot" "Screenshot" "Recording to ${screenshot_directory//${HOME}/~}/$dt.mp4" -w --action="kill $pid"="Stop Recording" | xargs -I{} bash -c "{}"
  wl-copy -t video/mp4 <"$dp"
}

stop_recording() {
  if [ -z "$(pgrep wf-recorder)" ]; then
    notify-send --app-name="screenshot" "Screenshot" "No recording found"
    exit 1
  fi

  killall wf-recorder
  notify-send --app-name="screenshot" "Screenshot" "Recording stopped"
}

get_options() {
  echo "  Region"
  echo "  Window"
  echo "  Screen"
  echo "  Region  File (GIF)"
  echo "  Region  File (MP4)"
  echo "  Region  File (MP4 with Audio)"
  echo "  Stop recording"
}

check_deps() {
  if ! hash "$1" 2>/dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

show_help() {
  echo ### rofi-screenshot
  echo "USAGE: rofi-screenshot [OPTION] <argument>"
  echo "(no option)"
  echo "    show the screenshot menu"
  echo "-s, --stop"
  echo "    stop recording"
  echo "-h, --help"
  echo "    this screen"
  echo "-d, --directory <directory>"
  echo "    set the screenshot directory"
  echo "-t, --timestamp <format>"
  echo "    set the format used for timestamps, in the format the date"
  echo "    command expects (default '+%d-%m-%Y %H:%M:%S')"
}

check_directory() {
  if [[ ! -d $1 ]]; then
    echo "Directory does not exist!"
    exit 1
  fi
}

main() {
  # check dependencies
  check_deps hyprshot
  check_deps ffmpeg
  check_deps wl-copy
  check_deps satty
  check_deps rofi
  check_deps wf-recorder
  check_deps slurp

  # rebind long args as short ones
  for arg in "$@"; do
    shift
    case "$arg" in
    '--help') set -- "$@" '-h' ;;
    '--directory') set -- "$@" '-d' ;;
    '--timestamp') set -- "$@" '-t' ;;
    '--stop') set -- "$@" '-s' ;;
    *) set -- "$@" "$arg" ;;
    esac
  done

  # parse short options
  OPTIND=1
  date_format="$default_date_format"
  while getopts "hd:t:s" opt; do
    case "$opt" in
    'h')
      show_help
      exit 0
      ;;
    'd')
      check_directory $OPTARG
      screenshot_directory="$OPTARG"
      ;;
    't')
      date_format="$OPTARG"
      ;;
    's')
      stop_recording
      exit 0
      ;;
    '?')
      show_help
      exit 1
      ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  # Get choice from rofi
  choice=$( (get_options) | rofi -dmenu -i -fuzzy -p "Screenshot" -theme-str 'window {width: 20em;} listview {lines: 7;}')

  # If user has not picked anything, exit
  if [[ -z "${choice// /}" ]]; then
    exit 1
  fi

  cmd='date "${date_format}"'
  dt=$(eval $cmd)

  # run the selected command
  case $choice in
  '  Region')
    makescreenshot region "$dt"
    ;;
  '  Window')
    makescreenshot window "$dt"
    ;;
  '  Screen')
    makescreenshot output "$dt"
    ;;
  '  Region  File (GIF)')
    rgtf "$dt"
    ;;
  '  Region  File (MP4)')
    rvtf "$dt"
    ;;
  '  Region  File (MP4 with Audio)')
    rvtf "$dt" -a
    ;;
  '  Stop recording')
    stop_recording
    ;;
  esac

  # done
  set -e
}

main "$@" &

exit 0
